/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 lowpoly_room.glb --transform --types 
Files: lowpoly_room.glb [1.54MB] > /Users/abhay/Repos/abhay-portfolio/public/lowpoly_room-transformed.glb [105.01KB] (93%)
Author: coremort (https://sketchfab.com/coremort)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lowpoly-room-e49f71feb3ea470888993134ce746bd5
Title: Lowpoly Room
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { EffectComposer, SelectiveBloom } from '@react-three/postprocessing';

type ActionName = 'actionNameOne' | 'actionNameTwo';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

// https://github.com/pmndrs/gltfjsx/issues/101#issuecomment-1363432531
type GLTFResult = GLTF & {
  nodes: {
    Box010001_Color_0: THREE.Mesh
    Box010001_mirror_0: THREE.Mesh
    Box010001_emission_window_0: THREE.Mesh
    Box010001_emission_lamp_0: THREE.Mesh
  }
  materials: {
    Color: THREE.MeshStandardMaterial
    PaletteMaterial001: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
    PaletteMaterial003: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}
// 

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/lowpoly_room-transformed.glb') as GLTFResult
  // materials.PaletteMaterial002.emissiveIntensity = 10;
  // materials.PaletteMaterial002.toneMapped = false;
  // materials.PaletteMaterial003.emissive = new THREE.Color(0xff0000);
  // materials.PaletteMaterial003.emissiveIntensity = 10;
  // materials.PaletteMaterial003.toneMapped = false;
  // materials.PaletteMaterial003.emissive = new THREE.Color(0xff0000);
  return (
    <group {...props} dispose={null} position={[-0, -500, -0]}>
      {/* <EffectComposer > */}
      {/* <SelectiveBloom luminanceThreshold={1} luminanceSmoothing={0.5} intensity={100}  kernelSize={3} /> */}
      <mesh castShadow geometry={nodes.Box010001_Color_0.geometry} material={materials.Color} rotation={[-Math.PI / 2, 0, 0]} scale={100}  />
      <mesh castShadow geometry={nodes.Box010001_mirror_0.geometry} material={materials.PaletteMaterial001} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      <mesh  geometry={nodes.Box010001_emission_window_0.geometry} material={materials.PaletteMaterial002} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      <mesh  geometry={nodes.Box010001_emission_lamp_0.geometry} material={materials.PaletteMaterial003} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      {/* </EffectComposer> */}
    </group>
  )
}

useGLTF.preload('/lowpoly_room-transformed.glb')
